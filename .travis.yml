language: c

matrix:
  include:
    - compiler: clang
      os: osx
    - compiler: gcc
      os: linux
    - env: DO_COVERITY_SCAN=yes

env:
  global:
    # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
    #   via the "travis encrypt" command using the project repo's public key
    - secure: "ByZq6EUK5MXuqJIhI1xSu1cmi/P7lKRi476LrOLmOHhE+w7Go99YVFPeNH27eIROnRYzlYosloFknHxZ2vsJxAKMaQjmmqLASxGXw3hYcvCX2P9/WJaSagw8WenrcC0gFLNVljiYMEKqaBbldVuG8Bz+HpeyyDvm4TfShDic9Kw="
    - COVERITY_SCAN_BRANCH_PATTERN="(master|coverity.*)"
    - COVERITY_SCAN_NOTIFICATION_EMAIL="frankmorgner@gmail.com"
    - COVERITY_SCAN_BUILD_COMMAND="make -j 4"
    - COVERITY_SCAN_PROJECT_NAME="$TRAVIS_REPO_SLUG"
    - SOURCE_DATE_EPOCH=$(git log -1 --pretty=%ct)

sudo: false

addons:
  apt_packages:
    - libp11-dev
    - libssl-dev
    - libpam0g-dev
    - autopoint

before_install:
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then
        brew update;
        brew uninstall libtool;
        brew install libtool;
        brew install libp11 openssl ccache;
        brew link --force openssl;
        export CFLAGS="-I$(brew --prefix openssl)/include"
        export LDFLAGS="-L$(brew --prefix openssl)/lib"
        export PATH="/usr/local/opt/ccache/libexec:$PATH";
        export PATH="/usr/local/opt/gettext/bin:$PATH";
    fi

before_script:
  - ./bootstrap
  - ./configure
  # Optionally try to upload to Coverity Scan
  # On error (propably quota is exhausted), just continue
  - if [ -n "${DO_COVERITY_SCAN}" ]; then curl -s 'https://scan.coverity.com/scripts/travisci_build_coverity_scan.sh' | bash || true; fi

script:
  - if [ -z "${DO_COVERITY_SCAN}" ]; then
      make distcheck;
    fi

cache:
  apt: true
  ccache: true
  directories:
     - $HOME/Library/Caches/Homebrew
